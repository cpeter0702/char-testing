package com.peter.testing.domain;

import static com.peter.testing.domain.AssertUtils.bigDecimalCompareTo;
import static com.peter.testing.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class StockRecordsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockRecordsAllPropertiesEquals(StockRecords expected, StockRecords actual) {
        assertStockRecordsAutoGeneratedPropertiesEquals(expected, actual);
        assertStockRecordsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockRecordsAllUpdatablePropertiesEquals(StockRecords expected, StockRecords actual) {
        assertStockRecordsUpdatableFieldsEquals(expected, actual);
        assertStockRecordsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockRecordsAutoGeneratedPropertiesEquals(StockRecords expected, StockRecords actual) {
        assertThat(expected)
            .as("Verify StockRecords auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockRecordsUpdatableFieldsEquals(StockRecords expected, StockRecords actual) {
        assertThat(expected)
            .as("Verify StockRecords relevant properties")
            .satisfies(e -> assertThat(e.getStockId()).as("check stockId").isEqualTo(actual.getStockId()))
            .satisfies(e -> assertThat(e.getSticker()).as("check sticker").isEqualTo(actual.getSticker()))
            .satisfies(
                e ->
                    assertThat(e.getBusinessDate())
                        .as("check businessDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getBusinessDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getStockPrice())
                        .as("check stockPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getStockPrice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockRecordsUpdatableRelationshipsEquals(StockRecords expected, StockRecords actual) {}
}
